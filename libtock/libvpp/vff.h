#pragma once
#include "libvpp/vpp.h"

#define VFF_DRIVER_NUM 0x90200
#define SIZE_VFF_HEADER 90

// 1) Firmware Header Management 
MGT_Response_Code MGT_Store_Firmware_Header(uint8_t* firmware_header_data);
MGT_Response_Code MGT_Retrieve_Firmware_Header(uint8_t* firmware_identifier);

// 2) Firmware State Management
MGT_Response_Code MGT_Enable_Firmware(UUID_t firmware_identifier);
MGT_Response_Code MGT_Disable_Firmware(UUID_t firmware_identifier);
MGT_Response_Code MGT_Is_Firmware_Enabled(UUID_t firmware_identifier); 
MGT_Response_Code MGT_Delete_Firmare(UUID_t firmware_identifier);

// 3) Firmware Content Management
MGT_Response_Code MGT_Open_Process_SubMemoryPartition(UUID_t firmware_identifier,MK_Index_t index);
MGT_Response_Code MGT_Close_Process_SubMemoryPartition(void);
MGT_Response_Code MGT_Allocate_Firmware(UUID_t firmware_identifier);

// Firmware Header used for Testing 
static uint8_t fw_hdr1[90]={
    0xa3, 0x97, 0xa2, 0x55, 0x53, 0xbe, 0xf1, 0xfc,
    0xf9, 0x79, 0x6b, 0x52, 0x14, 0x13, 0xe9, 0xe2,
    0x2d, 0x51, 0x8e, 0x1f, 0x56, 0x8, 0x57, 0x27, 
    0xa7, 0x5, 0xd4, 0xd0, 0x52, 0x82, 0x77,0x75, 
    0x1b, 0x99, 
    0x4a, 0xed, 
    0x58, 0x3d, 
    0x6a,
    0x52,
    0x36, 
    0xd5, 
    0x24,
    0x4a, 
    0x68, 0x8e, 0xad, 0x95, 
    0x5f, 0x3c, 0x35, 0xb5, 
    0xc4, 0x8c, 0xdd, 0x6c, 
    0x11, 0x32, 0x3d, 0xe2, 
    0xb4, 0xb4, 0x59, 0xcf, 
    0xce, 0x23, 0x3d, 0x27, 
    0xdf, 0xa7, 
    0xf9, 0x96, 
    0xfc, 0x1e, 
    0xe0, 0x66, 
    0x2c, 0xe0, 
    0x7b, 0x8c,
    0xca, 0x30, 
    0x42, 0x8f, 
    0xbc, 0x9f, 
    0x7b, 0xce, 
    0xd1, 0xb8};
// Another Firmware Header used for Testing 
static uint8_t fw_hdr2[90]={
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x1b, 0x99, 
    0x4a, 0xed, 
    0x58, 0x3d, 
    0x6a,
    0x52,
    0x36, 
    0xd5, 
    0x24,
    0x4a, 
    0x68, 0x8e, 0xad, 0x95, 
    0x5f, 0x3c, 0x35, 0xb5, 
    0xc4, 0x8c, 0xdd, 0x6c, 
    0x11, 0x32, 0x3d, 0xe2, 
    0xb4, 0xb4, 0x59, 0xcf, 
    0xce, 0x23, 0x3d, 0x27, 
    0xdf, 0xa7, 
    0xf9, 0x96, 
    0xfc, 0x1e, 
    0xe0, 0x66, 
    0x2c, 0xe0, 
    0x7b, 0x8c,
    0xca, 0x30, 
    0x42, 0x8f, 
    0xbc, 0x9f, 
    0x7b, 0xce, 
    0xd1, 0xb8};

static uint8_t fw_id[16]={
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

